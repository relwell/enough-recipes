services:
  backend_base:
    build: .
    volumes:
      - .:/code
    environment:
      DATABASE_URL: mysql://root:root@mysql:3306/enoughrecipes

  app:
    extends:
      service: backend_base
    links:
      - mysql
      - elasticsearch
      - broker
    ports:
      - "8000:8000"

  consumer:
    extends:
      service: backend_base
    links:
      - mysql
      - elasticsearch
      - broker
    command: poetry run python manage.py run_recipe_consumer

  producer:
    extends:
      service: backend_base
    links:
      - mysql
      - elasticsearch
      - broker
    command: poetry run python manage.py run_recipe_producer

  mysql:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: enoughrecipes
    volumes:
      - my-datavolume:/var/lib/mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  elasticsearch:
    image: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"

volumes:
  my-datavolume:
